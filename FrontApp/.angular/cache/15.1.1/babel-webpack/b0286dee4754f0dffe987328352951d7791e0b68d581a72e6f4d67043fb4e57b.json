{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar textMaskCore_1 = require(\"text-mask-core/dist/textMaskCore\");\nvar ɵngcc0 = require('@angular/core');\nvar TextMaskConfig = /** @class */function () {\n  function TextMaskConfig() {}\n  return TextMaskConfig;\n}();\nexports.TextMaskConfig = TextMaskConfig;\nexports.MASKEDINPUT_VALUE_ACCESSOR = {\n  provide: forms_1.NG_VALUE_ACCESSOR,\n  useExisting: core_1.forwardRef(function () {\n    return MaskedInputDirective;\n  }),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n  var userAgent = platform_browser_1.ɵgetDOM() ? platform_browser_1.ɵgetDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\nvar MaskedInputDirective = /** @class */function () {\n  function MaskedInputDirective(_renderer, _elementRef, _compositionMode) {\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._compositionMode = _compositionMode;\n    this.textMaskConfig = {\n      mask: [],\n      guide: true,\n      placeholderChar: '_',\n      pipe: undefined,\n      keepCharPositions: false\n    };\n    this.onChange = function (_) {};\n    this.onTouched = function () {};\n    /** Whether the user is creating a composition string (IME events). */\n    this._composing = false;\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n  MaskedInputDirective.prototype.ngOnChanges = function (changes) {\n    this._setupMask(true);\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value);\n    }\n  };\n  MaskedInputDirective.prototype.writeValue = function (value) {\n    this._setupMask();\n    // set the initial value for cases where the mask is disabled\n    var normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue);\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value);\n    }\n  };\n  MaskedInputDirective.prototype.registerOnChange = function (fn) {\n    this.onChange = fn;\n  };\n  MaskedInputDirective.prototype.registerOnTouched = function (fn) {\n    this.onTouched = fn;\n  };\n  MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  };\n  MaskedInputDirective.prototype._handleInput = function (value) {\n    if (!this._compositionMode || this._compositionMode && !this._composing) {\n      this._setupMask();\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value);\n        // get the updated value\n        value = this.inputElement.value;\n        this.onChange(value);\n      }\n    }\n  };\n  MaskedInputDirective.prototype._setupMask = function (create) {\n    if (create === void 0) {\n      create = false;\n    }\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement;\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];\n      }\n    }\n    if (this.inputElement && create) {\n      this.textMaskInputElement = textMaskCore_1.createTextMaskInputElement(Object.assign({\n        inputElement: this.inputElement\n      }, this.textMaskConfig));\n    }\n  };\n  MaskedInputDirective.prototype._compositionStart = function () {\n    this._composing = true;\n  };\n  MaskedInputDirective.prototype._compositionEnd = function (value) {\n    this._composing = false;\n    this._compositionMode && this._handleInput(value);\n  };\n  /** @nocollapse */\n  MaskedInputDirective.ctorParameters = function () {\n    return [{\n      type: core_1.Renderer2\n    }, {\n      type: core_1.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: core_1.Optional\n      }, {\n        type: core_1.Inject,\n        args: [forms_1.COMPOSITION_BUFFER_MODE]\n      }]\n    }];\n  };\n  MaskedInputDirective.propDecorators = {\n    'textMaskConfig': [{\n      type: core_1.Input,\n      args: ['textMask']\n    }]\n  };\n  MaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(t) {\n    return new (t || MaskedInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(forms_1.COMPOSITION_BUFFER_MODE, 8));\n  };\n  MaskedInputDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MaskedInputDirective,\n    selectors: [[\"\", \"textMask\", \"\"]],\n    hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MaskedInputDirective_input_HostBindingHandler($event) {\n          return ctx._handleInput($event.target.value);\n        })(\"blur\", function MaskedInputDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"compositionstart\", function MaskedInputDirective_compositionstart_HostBindingHandler() {\n          return ctx._compositionStart();\n        })(\"compositionend\", function MaskedInputDirective_compositionend_HostBindingHandler($event) {\n          return ctx._compositionEnd($event.target.value);\n        });\n      }\n    },\n    inputs: {\n      textMaskConfig: [\"textMask\", \"textMaskConfig\"]\n    },\n    exportAs: [\"textMask\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([exports.MASKEDINPUT_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return MaskedInputDirective;\n}();\nexports.MaskedInputDirective = MaskedInputDirective;\nvar TextMaskModule = /** @class */function () {\n  function TextMaskModule() {}\n  /** @nocollapse */\n  TextMaskModule.ctorParameters = function () {\n    return [];\n  };\n  TextMaskModule.ɵfac = function TextMaskModule_Factory(t) {\n    return new (t || TextMaskModule)();\n  };\n  TextMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TextMaskModule\n  });\n  TextMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextMaskModule, {\n      declarations: [MaskedInputDirective],\n      exports: [MaskedInputDirective]\n    });\n  })();\n  return TextMaskModule;\n}();\nexports.TextMaskModule = TextMaskModule;\nvar textMaskCore_2 = require(\"text-mask-core/dist/textMaskCore\");\nexports.conformToMask = textMaskCore_2.conformToMask;\n\n//# sourceMappingURL=angular2TextMask.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}